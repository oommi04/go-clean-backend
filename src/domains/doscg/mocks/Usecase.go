// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import doscg "github.com/tkhamsila/backendtest/src/domains/doscg"
import mock "github.com/stretchr/testify/mock"
import time "time"

// Usecase is an autogenerated mock type for the Usecase type
type Usecase struct {
	mock.Mock
}

// AnswerCustomer provides a mock function with given fields:
func (_m *Usecase) AnswerCustomer() (string, time.Duration) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 time.Duration
	if rf, ok := ret.Get(1).(func() time.Duration); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(time.Duration)
	}

	return r0, r1
}

// FindBC provides a mock function with given fields: ans1, ans2
func (_m *Usecase) FindBC(ans1 int, ans2 int) doscg.Bc {
	ret := _m.Called(ans1, ans2)

	var r0 doscg.Bc
	if rf, ok := ret.Get(0).(func(int, int) doscg.Bc); ok {
		r0 = rf(ans1, ans2)
	} else {
		r0 = ret.Get(0).(doscg.Bc)
	}

	return r0
}

// FindBestWayToScgBangsue provides a mock function with given fields: start
func (_m *Usecase) FindBestWayToScgBangsue(start string) (*doscg.DirectionResp, error) {
	ret := _m.Called(start)

	var r0 *doscg.DirectionResp
	if rf, ok := ret.Get(0).(func(string) *doscg.DirectionResp); ok {
		r0 = rf(start)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*doscg.DirectionResp)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(start)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindXYZ provides a mock function with given fields:
func (_m *Usecase) FindXYZ() doscg.Xyz {
	ret := _m.Called()

	var r0 doscg.Xyz
	if rf, ok := ret.Get(0).(func() doscg.Xyz); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(doscg.Xyz)
	}

	return r0
}
