// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import doscg "github.com/tkhamsila/backendtest/src/domains/doscg"
import google "github.com/tkhamsila/backendtest/src/external/google"
import mock "github.com/stretchr/testify/mock"

// Usecase is an autogenerated mock type for the Usecase type
type Usecase struct {
	mock.Mock
}

// FindBC provides a mock function with given fields: ans1, ans2
func (_m *Usecase) FindBC(ans1 int, ans2 int) doscg.bc {
	ret := _m.Called(ans1, ans2)

	var r0 doscg.bc
	if rf, ok := ret.Get(0).(func(int, int) doscg.bc); ok {
		r0 = rf(ans1, ans2)
	} else {
		r0 = ret.Get(0).(doscg.bc)
	}

	return r0
}

// FindBestWayToScgBangsue provides a mock function with given fields: start
func (_m *Usecase) FindBestWayToScgBangsue(start string) (*google.DirectionResp, error) {
	ret := _m.Called(start)

	var r0 *google.DirectionResp
	if rf, ok := ret.Get(0).(func(string) *google.DirectionResp); ok {
		r0 = rf(start)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*google.DirectionResp)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(start)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindXYZ provides a mock function with given fields:
func (_m *Usecase) FindXYZ() doscg.xyz {
	ret := _m.Called()

	var r0 doscg.xyz
	if rf, ok := ret.Get(0).(func() doscg.xyz); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(doscg.xyz)
	}

	return r0
}
